
커맨드 방식을 굳이 배우는 이유
백엔드 개발자가 이것만 씀 -> 커뮤니케이션의 문제

commit 
상대적인 것 : 다른 디자이너들은 프로그램위에서만 놀려고 한다.


git cli로 시작하는 방법 <--- 검색어

git init
스테이징
commit
push 
pull
clone

알고 있던 알파,베타,릴리즈버전,패치,업데이트 이런 게 다 git용어에 해당함



대부분의 경우 if문에서 제작자의 의도를 확인할 수 있음

함수 안에 다른 함수를 호출하는 경우 -> 고차함수
1. 제작자 : 유지보수에 압도적인 이점
2. 레고블럭처럼 컴퍼넌트화(모듈화,모디파이 라고도 함)

함수 + 함수 + 실행 + 함수 : 모듈화가 진행 되었다
실무측면 -> 
내가 만든 알고리즘을 하나씩 함수로 만들어놓고 어디든 써먹을 수 있게 만드는 것
-> 프론트엔드 개발자들이 많이 하는 주요 업무중 하나

함수형/객체지향형 프로그래밍
매개변수를 적극 활용 
return값이 중요


git 원격 저장소를 다운로드 받으려고 집 저장소에 폴더를 만드는게 아니라
놓을 자리를 열어놓는 것

바뀐 것만 효율적으로 업데이트하거나 변경사항을 기록하는 것 -> 버전관리

git push origin main(master) 원격 저장소에 저장하고 싶을 때
git clone 주소 로컬저장소에 아무것도없는데 원격 저장소에서 가져오고 싶을 떄
git pull 로컬 저장소에 있는데 업데이를 하고싶을 떄 git pull origin main

