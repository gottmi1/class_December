ide
개발환경
구름 ide웹기반
ide -> 콘솔로 들어가기
웹기반 컨테이너

컨테이너(모든 장치들을 즉석에서 설치)
개발황경을 한번에 구축해 버리는 것

이것저것 플러그인 안 깔고 편하게 하는 방법 없나?
--> 웹기반 IDE
웹 개발환경 컨테이너라는 것을 만들기 시작함
-> 컨테이너 이미지라는 것으로
모든 협업멤버들이 '동일한' 개발 환경을 만드는 것

깃 허브를 쓰는 사람들에게는 매우 편리한 서비스
깃 주소만 받아오면 어디서든지 하던작업을 이어서 할 수 있음


자바스크립트를 못하면 디자인을 못하는 시대가 오고있따.
제어가 곧 디자인이 되는 수준
제어 레벨을 올리는 것에 중점 : 유연한 디자인
제어의 목적이 무엇인가 생각해야 함
제어레벨(자바스크립트레벨) = 경쟁력


곧 마주칠 러닝커브

프론트엔드는 모양이 아니라
프론트 단에 보이는 모든 것을 만든다 

0. 웹 자체의 흐름을 체크
1. DOM -> 배열,객체거나 노드 몇가지 안 댐
2. BOM -> url,dns,
3. 네트워크
<form> -> 요청과 응답
404 error ( not found )
4. 백엔드가 돌아가는 대략적인 흐름을 알아야 소통할 수 있음
- 팀원과 대화용도
백엔드의 업무
 서버 <-> DB 조율 data,유지보수,안정성 등

프론트 엔드는
 서버 <-> 사용자간의 모든 작업을 프론트엔드라고 함.
클라이언트의 사용자 경험을 증명, 어필할 수 있는

웹에서 제이쿼리 -> 리액트가 되어가고 있음.
흐름을 캐치해야 한다 
되도록이면 테스트를 보는 회사로 갈 것 : 인정 받는 곳

결론 : 자바스크립트 공부좀 해라

타입스크립트 : 명시해가면서 쓰는 자바스크립트(조건이 더 빡빡한 대신 완성하면 오류가 안남)
-> 최종 아웃풋은 자바스크립트로 뱉어냄



자바스크립트
1. 알고리즘 (컴퓨터와 대화하는 절차) - 바뀌지 않음
2. 프로그래밍 문법 
기본형으로 계속해서 연습해야 는다

3. 함수를 건드릴 때가 올 것임


서비스 / UI디자이너의 고충
1. 시안 만들고 컨펌받기 하늘에 별따기
2. 전략을 세웠을 떄 다른 직원과 업무 실랑이
3. 파트간의 충돌을 조율해야 함
4. 마케팅(통계) 최소,최댓값,분포 등



자소서 팁
잘못된 예) 안녕하세요 저는 누구입니다.
그보다 조금 나은 예 : 
웹을 접하게 된 경위는 그리 특별하지 않았습니다.
차오른 나이만큼 무언갈 해야 했고, 제도를 찾아 선택했던 것이 시작이었습니다.

특별하지 않았던 지루한 '직업선택'에서 무언가를 깨닫게 된 것은 '몰입' 때문이었습니다.
그 뭉너가는 주변의 잡음을 잠잠하게 만들었습니다. 이것이 좋다.
혹은 할만하다 라고 말할 수 있다기 보다는 몰입하고 있다라고 말할 수 있습니다.

몰입하다보니 느끼는 것이 있었습니다.
이 직업은 무언가를 남긴다는 것입니다. 나도 무언가를 남길 수 있는 것이 있다면 좋겠다는 생각이 가장 큰 첫 번째 지원동기입니다.

1. 한가지 주제(키워드)를 잡아 계속 이어서 이야기할 수 있으면 좋다.
2. '나'를 직접적으로 표현하는 것이 아니라 나에 대한 생각을 피력하면 좋다.

나는 무엇을 만드는 것을 좋아합니다 - xxx
좋아하는 것을 생각합니다. 그게 이상한 그릇이지만요. - 호기심 유발?

3. 문장을 짧고 간결하게 미사여구 없이 쓴다.

저는 이러이러한 일을 하는것을 무엇보다 좋아합니다 어쩌구저쩌구 이렇게 말고
저는 전부터 이러이러한 일을 좋아했습니다.

4. 직접적인 좋다 싫다는 x

저는 의자에 앉아있을 떄 맘이 편합니다 -> 작업시키기 좋은 인재라는 걸 은유적으로 표현

5. 이름을 쓰려면 마지막에

읽어주셔서 감사합니다. 김진원이었씁니다 이러케







*객체

1)for - in
const asd = { a: 97897, b: 232, c: 1212 };

for (const sss in asd) {
  console.log(`${sss}: ${asd[sss]}`);
}

출력값 

> "a: 97897"
> "b: 232"
> "c: 1212"

무엇이 어떤 자리에 들어가는지 확인해보자

용도 

이것은 쉽게 객체의 속성을 확인(콘솔이나 다른 방법으로 출력)할 수 있기 때문에 실질적으로 디버깅을 위해 사용될 수 있습니다. 
배열이 데이터의 저장에 있어서는 더 실용적이지만, 
키-값 쌍이 선호되는 데이터의 경우(속성이 "key"의 역할을 함) 특정 값을 가진 키가 있는지 확인하려는 경우에 for...in을 사용할 수 있습니다.



1)for - of

배열에 대한 반복

const arar = ['a', 'b', 'c'];

for (const asas of arar) {
  console.log(asas);
}

> "a"
> "b"
> "c"

문자열에 대한 반복

let iterable = "boo";

for (let value of iterable) {
  console.log(value);
}
// "b"
// "o"
// "o"


map에 대한 반복

let iterable = new Map([["a", 1], ["b", 2], ["c", 3]]);

for (let entry of iterable) {
  console.log(entry);
}
// [a, 1]
// [b, 2]
// [c, 3]

for (let [key, value] of iterable) {
  console.log(value);
}
// 1
// 2
// 3



map은 또 무엇이냐?

map() 메서드는 배열 내의 모든 요소 각각에 대하여 주어진 함수를 호출한 결과를 모아 새로운 배열을 반환합니다.

const array1 = [1, 4, 9, 16];

// pass a function to map
const map1 = array1.map(x => x * 2);

console.log(map1);

결과 = [2,8,18,32]


https://velog.io/@jakeseo_me/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%9D%BC%EB%A9%B4-%EC%95%8C%EC%95%84%EC%95%BC-%ED%95%A0-33%EA%B0%80%EC%A7%80-%EA%B0%9C%EB%85%90-19-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-Map-Reduce-Filter-9ujvot0rm3

