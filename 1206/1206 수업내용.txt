금주 일정 

디자인보단 개발을 하고싶기 때문에 쓸 포트폴리오를 만드는 것 보다는 실력을 키우는데 집중하고싶음.
당장 쓸만하지도 않은 포트폴리오를 만드는 것 보다는 자바스크립트 기본기와 리액트를 병행하며 공부하고자 함


디자인 - 결론이 없고 멈추는 것도 없음, 그래서 자유롭고 새롭다

제이쿼리 -> 쓰긴 쓰는데 사양되는 중
키면 처음부터 끝까지 데이터를 다 읽고 실행됨 --> 비효율적임
비즈니스모델이 빈약한 삯바느질 회사에서 "빠르게 처리하고 성능 무시하고 새로운 거 안 하는"
--> 국비학원에서나 가르치는 라이브러리가 되었다 -> 점점 안보이게 될 것


어렵거나 복잡한 코드를 만났을 때
※ '큰'코드부터 먼저 보기
-> 새로운 코드 패턴을 봤을 때 -> 검색부터 하기

큰영역의 scope부터 확인한다.
-> 큰 함수부터 하나씩 가져온다 -> 동작 확인
-> 작은 함수 가져와서 동작확인 -> 반복

※실수하는 포인트 
전체를 가져온 다음 읽어내려가면 -> 아무도 이해 못함

코딩 고수 -> 빠르게 이해하는 사람? 세모
다른 사람이 작성한 것을 편하게 볼 수 있는 사람 oo

카피할 때 -> 큰 것부터 작동 -> 작은 것 작동 -> 내껄로 만듬

github를 쓸 줄 알면?
 usb가 필요없음
 클라우드 처럼 사용 가능함
 협업시 필수 -> 개편하기 때문
 
써야하는 이유 
1. 개발자(developer)들은 무적권 씀 -> 에이전시에선 개발을 안 하기 때문에 안 씀
2. git덕에 재택근무도 가능해진 상황 -> 회사에서 각자 어떻게 코딩했는지 확인 가능

git을 어렵게 하는 이유
1. 마우스를 안씀
2. 명령을 새로 배워야 함
※생소해서 싫어함

평생을 쓰던 방식 : GUI 그래픽으로 OS를 제어
명령어 박식으로 OS를 쓰는 방식 : 커맨드라인 방식 (CLI)
키보드-> os를 조작

사실 익숙함 별 필요없음

git -> CLI 방식으로 사용하는 게 git bash
window -> cmd
mac -> terminal

한 마디로 ☆마우스대신 키보드로 os를 제어하는 것★

mkdir -> make directory
새폴더 만들기
ls -> 
현재 디렉토리에 무엇이 있는지 확인
cd
상대경로나 절대경로를 사용하면 폴더간 이동함

명령어 -> 리눅스의 명령어를 git bash로 가져와 쓰는 것
리눅스라는 오픈소스OS의 명령어를 그대로 답습하고 있다.

크게 windowOS, MacOS, Linux가 있다.
안드로이드도 Linux기반 OS

커뮤니케이션 능력 -> 개발자에 한해선 git도 커뮤니케이션에 포함 됨.

reword : CLI를 사용하기 시작하면 에디터에서 거의 대부분의 일을 조작할 수 있음.

git 사용법

1. 프로젝트는 파일x 폴더 위주로 돌아감.
-> 프로젝트를 시작할 때 mkdir폴더를 만드는 것
2. git을 쓸 수 있도록 초기화. 처음으로 되돌리는 게 아니라 "초기설정" init
★git init
"깃아 이 폴더 버전관리 시작한다"
폴더 내에 .git이라는 숨김표시 된 폴더가 생김
3. 파일이 변경되면 -> 추적하기 시작한다.

커밋 메세지 업데이트하기

git commit -m "내용"

git log 
현재까지 커밋된 목록 엔터치면 다음줄 계속 나옴
탈출 : Q

컴퓨터다루는 모든 사람들은 
git을 통해 파일을 업데이트함.


commit마다 number(id)같은 게 있음

commit reset number
이렇게 하면 해당 커밋으로 돌아갈 수 있음

지금 만든게 맘에 안들어서 전으로 돌리고 싶을 때 쓸 수 있을 것 같음

1. 깃을 사용해 버전관리를 할수 있나
2. 스테에징 -> 커밋을 할 수 있나
3. 커밋 기록을 확인할수 있나
4. 리셋으로 돌아갈 수 있나

개발자들 : 중요한 코드를 만들면 커밋으로 저장 -> 스테이징
근데 하다가 막히거나 빠꾸를 먹어서 변경해야함 -> 커밋을 찾아 리셋으로 돌림
커밋을 할 때 어떤 메세지를 넣을지도 중요할 듯

git은 명령어로 제어만 할줄 안다면 파일관리에 압도적으로 편리하다
git hub desktop / source tree : gui버전 git
파일 만들고 스테이징 커밋 필요하면 롤백하는 것

클라우드처럼 사용하고 싶다면(버전관리를)
1. 프로젝트를 생성
-> repo 원격 github에 프로젝트를 (저장소) 만들어준다

2. 깃헙 사이트에 있는 폴더를 집에 있는 폴더로 복제한다
git이라는 명령어와 clone이라는 행동 그리고 깃주소가필요
-> 폴더가 생성됨
-> repository만들고 부모 폴더를 열고 터미널로 git 주소를 받아서 git clone
이후 폴더로 가서 .git이라는 추적폴더가 만들어졌는지 확인한다(숨김파일처리 되어있음)
-> 에디터로 만들어진 폴더로 들어가서 작업 진행

pull + git주소 로 땡겨오기도 가능하지만 git clone이 나을 것 같음

그리고 다시 git push git주소 로 밀어넣기도 가능하다
다만 받아오고 다시 밀어넣을 때는 vs코드로 받아온 폴더를 열고 거기 터미널에 푸시나 뭘 해야함

git을 써야하는 이유 : 편리하기도 한데 실무자들이 많이 씀 의존성이 높음
gir 을 쓸줄안다 -> 개발자들고 소통할 수 있다

링크만 있으면 가져오고 커밋입력해서 다시 던질 수 있으니까 편하다.

git checkout 브랜치명
브랜치명을 다른걸로 바꿀 수 있음
git merge 브랜치명
현재 있는 브랜치에 위에 입력한 브랜치를 합침